{"version":3,"file":"js/Popular-bundle-a8a23dbf.js","mappings":"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","sources":["webpack://github-hot/./src/api/index.ts","webpack://github-hot/./src/components/Tab/Tab.tsx","webpack://github-hot/./src/components/IconText/IconText.tsx","webpack://github-hot/./src/util/index.ts","webpack://github-hot/./src/components/Card/Card.tsx","webpack://github-hot/./src/components/Loading/Loading.tsx","webpack://github-hot/./src/components/Header/Header.tsx","webpack://github-hot/./src/hooks/localStorage.ts","webpack://github-hot/./src/pages/Popular/Popular.tsx","webpack://github-hot/./src/pages/Popular/index.ts"],"sourcesContent":["export const getGithubInfo = async (type: string, page: number) => {\n  try {\n    const res = await fetch(\n      `https://api.github.com/search/repositories?q=stars:%3E1${\n        type ? '+language:' + type : ''\n      }&sort=starts&order=desc&type=Repositories&page=${page}`,\n    );\n    return res.json();\n  } catch (err) {\n    alert(err);\n  }\n};\n\nexport const getUser = async (userId: string) => {\n  try {\n    const res = await fetch(`https://api.github.com/users/${userId}`);\n    return res.json();\n  } catch (err) {\n    alert(err);\n  }\n};\n","import React from 'react';\n\nimport './index.scss';\n\nexport interface TabProps {\n  list: string[];\n  onChange: (value: string) => void;\n  select?: string;\n}\n\nexport const Tab: React.FC<TabProps> = ({ list, select, onChange }) => {\n  const [current, setCurrent] = React.useState<string>(select || 'all');\n\n  const handleCurrentChange = (value: string) => {\n    onChange(value);\n    setCurrent(value);\n  };\n\n  return (\n    <ul className=\"tab\">\n      {list &&\n        list.map((item, index) => {\n          return (\n            <li\n              onClick={() => {\n                handleCurrentChange(item);\n              }}\n              className={current === item ? 'active' : ''}\n              key={`tab-list-${index}`}\n            >\n              {item}\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n","import React, { PropsWithChildren } from 'react';\n\nimport './index.scss';\n\nexport interface IconTextProps extends PropsWithChildren {\n  icon?: string;\n  color?: string;\n}\n\nexport const IconText: React.FC<IconTextProps> = ({ icon, color, children }) => {\n  return (\n    <span className=\"icon-text\">\n      <i className={`fa ${icon ? 'fa-' + icon : ''}`} style={{ color: color || '#000' }} />\n      {children}\n    </span>\n  );\n};\n","/**\n * 格式化成千分位\n * @param {number | string} num\n * */\nexport const formatNumber = (num: string | number) => {\n  const reg = /(?!^)(?=(\\d{3})+$)/g;\n  return String.prototype.replace.call(num, reg, ',');\n};\n","import React from 'react';\nimport { IconText } from '@components';\nimport { formatNumber } from '@util';\n\nimport './index.scss';\n\nexport interface CardProps {\n  rank: number | string;\n  avatar: string;\n  name: string;\n  user: string;\n  star: number | string;\n  fork: number | string;\n  issue: number | string;\n}\n\nexport const Card: React.FC<CardProps> = ({ rank, avatar, name, user, star, fork, issue }) => {\n  return (\n    <div className=\"card\">\n      <h3 className=\"card-rank\">#{rank}</h3>\n      <img alt=\"avatar\" src={avatar} />\n      <h4 className=\"card-name\">{name}</h4>\n      <IconText icon=\"user\" color=\"orange\">\n        {formatNumber(user)}\n      </IconText>\n      <IconText icon=\"star\" color=\"yellow\">\n        {formatNumber(star)} star\n      </IconText>\n      <IconText icon=\"code-fork\" color=\"blue\">\n        {formatNumber(fork)} fork\n      </IconText>\n      <IconText icon=\"exclamation-triangle\" color=\"red\">\n        {formatNumber(issue)} open Issue\n      </IconText>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './index.scss';\n\nexport const Loading: React.FC = () => {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"loader\" />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './index.scss';\n\nexport const Header: React.FC = () => {\n  return (\n    <header className=\"header\">\n      <nav>\n        <Link to=\"/\">Popular</Link>\n        <Link to=\"/battle\">Battle</Link>\n      </nav>\n    </header>\n  );\n};\n","import React from 'react';\n\n/**\n * localStorage 持久化数据\n */\nexport const useStateWithLocalStorage = <T>(key: string, initVal: T): [string, (value: string) => void] => {\n  if (typeof key !== 'string') {\n    throw new Error('key must be a string');\n  }\n\n  let preStr;\n  try {\n    let localStr = localStorage.getItem(key);\n    if (localStr === undefined) {\n      localStr = null; // 避免解析时报错，SyntaxError\n    }\n    preStr = JSON.parse(localStr as string); // 反序列化\n  } catch (error) {\n    console.error('useStateWithLocalStorage :>> ', error);\n  }\n\n  const [value, setValue] = React.useState<string>(preStr || initVal);\n\n  React.useEffect(() => {\n    localStorage.setItem(String(key), JSON.stringify(value)); // 序列化\n  }, [value]);\n\n  return [value, setValue];\n};\n","import React from 'react';\n\nimport { Row, Col } from 'react-flexbox-grid';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Tab, Card, Loading, Header } from '@components';\nimport { useStateWithLocalStorage } from '@hooks';\nimport { getGithubInfo } from '@api';\n\ntype ListData = {\n  owner: {\n    avatar_url: string;\n    login: string;\n  };\n  name: string;\n  forks: number;\n  open_issues: number;\n  stargazers_count: number;\n};\n\n/* const mountScrollEvent = (cb: () => void) => {\n *   const fn = () => {\n *     const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n *     const clientHeight = document.documentElement.clientHeight || document.body.clientHeight;\n *     const scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight;\n *     if (scrollHeight > clientHeight && scrollTop + clientHeight === scrollHeight) {\n *       cb();\n *     }\n *   };\n *   document.removeEventListener('scroll', fn);\n *   document.addEventListener('scroll', fn);\n * }; */\nexport const Popular: React.FC = () => {\n  const [loading, setLoading] = React.useState<boolean>(false);\n  const [type, setType] = useStateWithLocalStorage<string>('type', 'all');\n  const [typeList] = React.useState<string[]>(['all', 'javascript', 'ruby', 'java', 'css', 'python']);\n  const [list, setList] = React.useState<ListData[]>([]);\n\n  // pages\n  const [total, setTotal] = React.useState<number>(0);\n  const [current, setCurrent] = React.useState<number>(1);\n  const size = 30;\n\n  const getData = async (type: string, append = false) => {\n    if (total && total <= current * size) {\n      return false;\n    }\n    setLoading(true);\n\n    try {\n      const page = append ? current + 1 : 1;\n      const res = await getGithubInfo(type, page);\n      !append ? setList(res.items) : setList([...list, ...res.items]);\n      console.log(list, type);\n      setTotal(res.total_count);\n      setCurrent(page);\n      setType(type);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      alert(err);\n    }\n  };\n\n  React.useEffect(() => {\n    getData(type);\n  }, []);\n  /* React.useEffect(() => {\n   *   mountScrollEvent(() => {\n   *     getData(type, true);\n   *   });\n   * }, [list]);\n   */\n  const handleTabChange = (type: string) => {\n    setType(type);\n    getData(type);\n  };\n\n  const loadMore = () => {\n    getData(type, true);\n  };\n\n  return (\n    <>\n      <Header />\n      <Tab list={typeList} select={type} onChange={handleTabChange} />\n      {loading && <Loading />}\n      <div className=\"container\">\n        {list && list.length !== 0 && (\n          <InfiniteScroll dataLength={list.length} next={loadMore} hasMore={list.length < total}>\n            <Row>\n              {list.map((item, index) => {\n                return (\n                  <Col xs={6} md={4} lg={3} key={`card-list-${index}`}>\n                    <Card\n                      rank={index + 1}\n                      avatar={item.owner.avatar_url}\n                      name={item.name}\n                      user={item.owner.login}\n                      star={item.stargazers_count}\n                      fork={item.forks}\n                      issue={item.open_issues}\n                    />\n                  </Col>\n                );\n              })}\n            </Row>\n          </InfiniteScroll>\n        )}\n      </div>\n    </>\n  );\n};\n","export * from './Popular';\nimport { Popular } from './Popular';\nexport default Popular;\n"],"names":["getGithubInfo","type","page","fetch","res","json","alert","getUser","userId","Tab","list","select","onChange","React","current","setCurrent","className","map","item","index","onClick","value","key","IconText","icon","color","children","style","formatNumber","num","String","prototype","replace","call","Card","rank","avatar","name","user","star","fork","issue","alt","src","Loading","Header","to","Popular","loading","setLoading","initVal","Error","preStr","localStr","localStorage","getItem","undefined","JSON","parse","error","console","setValue","setItem","stringify","useStateWithLocalStorage","setType","typeList","setList","total","setTotal","getData","append","items","log","total_count","length","dataLength","next","hasMore","xs","md","lg","owner","avatar_url","login","stargazers_count","forks","open_issues"],"sourceRoot":""}