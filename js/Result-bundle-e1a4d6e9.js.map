{"version":3,"file":"js/Result-bundle-e1a4d6e9.js","mappings":"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","sources":["webpack://github-hot/./src/api/index.ts","webpack://github-hot/./src/pages/Result/Result.tsx","webpack://github-hot/./src/pages/Result/index.ts"],"sourcesContent":["import useSWRInfinite from 'swr/infinite';\n\ntype ListData = {\n  owner: {\n    avatar_url: string;\n    login: string;\n  };\n  name: string;\n  forks: number;\n  open_issues: number;\n  stargazers_count: number;\n};\n\ntype GithubInfo = {\n  items?: ListData[];\n  total_count?: number;\n  incomplete_results?: boolean;\n};\n\nexport const getGithubInfo = (type: string) => {\n  const getKey = (index: number) =>\n    `https://api.github.com/search/repositories?q=stars:%3E1${\n      type ? '+language:' + type : ''\n    }&sort=starts&order=desc&type=Repositories&page=${index + 1}`;\n  const fetcher = (url: string) => fetch(url).then((res) => res.json());\n\n  const { data, mutate, ...others } = useSWRInfinite<GithubInfo>(getKey, fetcher, {\n    shouldRetryOnError: false,\n    revalidateFirstPage: false,\n  });\n\n  return {\n    ...others,\n    data: Array.isArray(data)\n      ? data.reduce((a: ListData[], c: GithubInfo = {}) => {\n          const { items = [] } = c;\n          a.push(...items);\n          return a;\n        }, [])\n      : [],\n    total: Array.isArray(data) ? (data[0] && data[0].total_count) || 0 : 0,\n    reload: () => {\n      mutate(data);\n    },\n  };\n};\n\nexport const getUser = async (userId: string) => {\n  try {\n    const res = await fetch(`https://api.github.com/users/${userId}`);\n    return res.json();\n  } catch (err) {\n    alert(err);\n  }\n};\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loading, IconText } from '@components';\nimport { getUser } from '@api';\n\nimport './index.scss';\n\ninterface ResultCardProps {\n  winner: boolean;\n  avatar: string;\n  repos: number;\n  name: string;\n  location: string;\n  following: number;\n  follower: number;\n}\n\nconst ResultCard: React.FC<ResultCardProps> = ({ winner, avatar, repos, name, location, follower, following }) => {\n  return (\n    <div className=\"result-card\">\n      <h3>{winner ? 'Winner' : 'Loser'}</h3>\n      <img src={avatar} alt=\"avatar\" />\n      <h4>Scroes: {repos}</h4>\n      <h3>{name}</h3>\n      <div className=\"result-card-detail\">\n        <IconText icon=\"location-arrow\">{location}</IconText>\n        <IconText icon=\"users\">{follower}</IconText>\n        <IconText icon=\"user-plus\">{following}</IconText>\n        <IconText icon=\"code\">{repos}</IconText>\n      </div>\n    </div>\n  );\n};\n\ninterface GithubUserData {\n  public_repos: number;\n  avatar_url: string;\n  name: string;\n  location: string;\n  followers: number;\n  following: number;\n}\n\nexport const Result: React.FC = () => {\n  const [loading, setLoading] = React.useState<boolean>(false);\n  const [p1Data, setP1Data] = React.useState<GithubUserData>();\n  const [p2Data, setP2Data] = React.useState<GithubUserData>();\n\n  const [search] = useSearchParams();\n  const p1 = search.get('p1');\n  const p2 = search.get('p2');\n\n  const getPlayerInfo = async () => {\n    if (p1 && p2) {\n      setLoading(true);\n      const data1 = await getUser(p1);\n      const data2 = await getUser(p2);\n      setLoading(false);\n      setP1Data(data1);\n      setP2Data(data2);\n    }\n  };\n\n  React.useEffect(() => {\n    getPlayerInfo();\n  }, []);\n\n  return (\n    <>\n      {loading && <Loading />}\n      <div className=\"container\">\n        {p1Data && p2Data && (\n          <div className=\"result\">\n            <ResultCard\n              winner={p1Data.public_repos > p2Data.public_repos}\n              repos={p1Data.public_repos}\n              avatar={p1Data.avatar_url}\n              name={p1Data.name}\n              location={p1Data.location}\n              follower={p1Data.followers}\n              following={p1Data.following}\n            />\n            <ResultCard\n              winner={p2Data.public_repos > p1Data.public_repos}\n              repos={p2Data.public_repos}\n              avatar={p2Data.avatar_url}\n              name={p2Data.name}\n              location={p2Data.location}\n              follower={p2Data.followers}\n              following={p2Data.following}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","export * from './Result';\nimport { Result } from './Result';\n\nexport default Result;\n"],"names":["getGithubInfo","type","useSWRInfinite","index","url","fetch","then","res","json","shouldRetryOnError","revalidateFirstPage","data","mutate","Array","isArray","reduce","a","c","items","push","total","total_count","reload","getUser","userId","alert","i","ResultCard","winner","avatar","repos","name","location","follower","following","className","src","alt","icon","Result","React","loading","setLoading","p1Data","setP1Data","p2Data","setP2Data","search","useSearchParams","p1","get","p2","getPlayerInfo","data1","data2","public_repos","avatar_url","followers"],"sourceRoot":""}