{"version":3,"file":"js/Popular-bundle-3dfbaaae.js","mappings":"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","sources":["webpack://github-hot/./src/api/index.ts","webpack://github-hot/./src/enum/index.ts","webpack://github-hot/./src/hooks/localStorage.ts","webpack://github-hot/./src/pages/Popular/Popular.tsx","webpack://github-hot/./src/hooks/popular.ts","webpack://github-hot/./src/pages/Popular/index.ts"],"sourcesContent":["import useSWRInfinite from 'swr/infinite';\n\ntype ListData = {\n  owner: {\n    avatar_url: string;\n    login: string;\n  };\n  name: string;\n  forks: number;\n  open_issues: number;\n  stargazers_count: number;\n};\n\ntype GithubInfo = {\n  items?: ListData[];\n  total_count?: number;\n  incomplete_results?: boolean;\n};\n\nexport const getGithubInfo = (type: string) => {\n  const getKey = (index: number) =>\n    `https://api.github.com/search/repositories?q=stars:%3E1${\n      type ? '+language:' + type : ''\n    }&sort=starts&order=desc&type=Repositories&page=${index + 1}`;\n  const fetcher = (url: string) => fetch(url).then((res) => res.json());\n\n  const { data, mutate, ...others } = useSWRInfinite<GithubInfo>(getKey, fetcher, {\n    shouldRetryOnError: false,\n    revalidateFirstPage: false,\n  });\n\n  return {\n    ...others,\n    data: Array.isArray(data)\n      ? data.reduce((a: ListData[], c: GithubInfo = {}) => {\n          const { items = [] } = c;\n          a.push(...items);\n          return a;\n        }, [])\n      : [],\n    total: Array.isArray(data) ? (data[0] && data[0].total_count) || 0 : 0,\n    reload: () => {\n      mutate(data);\n    },\n  };\n};\n\nexport const getUser = async (userId: string) => {\n  try {\n    const res = await fetch(`https://api.github.com/users/${userId}`);\n    return res.json();\n  } catch (err) {\n    alert(err);\n  }\n};\n","export enum LanguageType {\n  All = 'all',\n  Javascript = 'javascript',\n  Ruby = 'ruby',\n  Java = 'java',\n  Css = 'css',\n  Python = 'python',\n}\n","import React from 'react';\n\n/**\n * localStorage 持久化数据\n */\nexport const useStateWithLocalStorage = <T>(key: string, initVal: T): [string, (value: string) => void] => {\n  if (typeof key !== 'string') {\n    throw new Error('key must be a string');\n  }\n\n  let preStr;\n  try {\n    let localStr = localStorage.getItem(key);\n    if (!localStr) {\n      localStr = null; // 避免解析时报错，SyntaxError\n    }\n    preStr = JSON.parse(localStr as string); // 反序列化\n  } catch (error) {\n    console.error('useStateWithLocalStorage :>> ', error);\n  }\n\n  const [value, setValue] = React.useState<string>(preStr || initVal);\n\n  React.useEffect(() => {\n    localStorage.setItem(String(key), JSON.stringify(value)); // 序列化\n  }, [value]);\n\n  return [value, setValue];\n};\n","import React from 'react';\nimport { useSearchParams, Link } from 'react-router-dom';\n\nimport { Card, Loading, Tab } from '@components';\nimport { Col, Row } from 'react-flexbox-grid';\nimport { LanguageType } from '@enum';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { usePopular } from '@hooks';\n\n// from enum get TypeList\nconst typeList = Object.keys(LanguageType).map((name) => {\n  return LanguageType[name as keyof typeof LanguageType];\n});\n\nexport const Popular: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const type = searchParams.get('type') || 'all';\n  const { list, isLoading, isError, loadMore, reload, total } = usePopular(type);\n\n  const errorLoader = () => <button onClick={reload}>重新加载</button>;\n  console.log(isError);\n  const loader = () => {\n    if (isError) {\n      return errorLoader();\n    }\n    if (isLoading) {\n      return <Loading />;\n    }\n    return null;\n  };\n\n  return (\n    <>\n      <Tab\n        link={(item) => {\n          return (\n            <Link to={`/?type=${item}`} className={item === type ? 'active' : ''}>\n              {item}\n            </Link>\n          );\n        }}\n        list={typeList}\n        select={type}\n      />\n      <div className=\"container\">\n        {list && list.length !== 0 && (\n          <InfiniteScroll\n            dataLength={list.length}\n            next={loadMore}\n            hasMore={list.length < total}\n            loader={<>{loader()}</>}\n            scrollableTarget=\"scrollable\"\n          >\n            <Row>\n              {list.map((item, index) => {\n                return (\n                  <Col xs={6} md={4} lg={3} key={`card-list-${index}`}>\n                    <Card\n                      rank={index + 1}\n                      avatar={item.owner.avatar_url}\n                      name={item.name}\n                      user={item.owner.login}\n                      star={item.stargazers_count}\n                      fork={item.forks}\n                      issue={item.open_issues}\n                    />\n                  </Col>\n                );\n              })}\n            </Row>\n          </InfiniteScroll>\n        )}\n      </div>\n    </>\n  );\n};\n","import { getGithubInfo } from '@api';\n\nexport const usePopular = (type: string) => {\n  const { data, error, size, setSize, reload, isValidating, total } = getGithubInfo(type);\n  const loadMore = () => {\n    if (isValidating) {\n      return;\n    }\n    setSize(size + 1);\n  };\n\n  return {\n    // isLoading: (!data && !error) || !!(size > 0 && data && typeof data[size - 1] === 'undefined'),\n    isLoading: isValidating,\n    isError: !!error,\n    list: data,\n    total,\n    loadMore,\n    reload,\n  };\n};\n","export * from './Popular';\nimport { Popular } from './Popular';\nexport default Popular;\n"],"names":["getGithubInfo","type","useSWRInfinite","index","url","fetch","then","res","json","shouldRetryOnError","revalidateFirstPage","data","mutate","Array","isArray","reduce","a","c","items","push","total","total_count","reload","getUser","userId","alert","LanguageType","typeList","Object","keys","map","name","Popular","useSearchParams","get","error","size","setSize","isValidating","isLoading","isError","list","loadMore","usePopular","console","log","link","item","to","className","select","length","dataLength","next","hasMore","loader","onClick","scrollableTarget","xs","md","lg","key","rank","avatar","owner","avatar_url","user","login","star","stargazers_count","fork","forks","issue","open_issues"],"sourceRoot":""}